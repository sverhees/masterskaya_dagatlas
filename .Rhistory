knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(lingtypology)
library(DT)
vill <- read_tsv("data/villages.csv")
vill <- vill[complete.cases(vill$lat),]
lang <- read_tsv("data/languages.csv")
vill_lang <- merge(vill, lang, by = "language")
ev <- read_tsv("table_example_evidentialityxtense.csv")
ev_vill <- merge(vill_lang, ev, by = "glottocode")
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$language.y,
color = ev_vill$color,
stroke.features = ev_vill$value,
stroke.color = c("white", "black"),
label = ev_vill$language,
zoom.control = T,
popup = ev_vill$name,
width = 3, stroke.radius = 8,
legend = FALSE)
vill <- read_tsv("data/villages.csv")
vill <- vill[complete.cases(vill$lat),]
lang <- read_tsv("data/languages.csv")
vill_lang <- merge(vill, lang, by = "language")
ev <- read_tsv("table_example_evidentialityxtense.csv")
ev_vill <- merge(vill_lang, ev, by = "glottocode")
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$language.y,
color = ev_vill$color,
stroke.features = ev_vill$value,
stroke.color = c("black", "white"),
label = ev_vill$language,
zoom.control = T,
popup = ev_vill$name,
width = 3, stroke.radius = 8,
legend = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
lang <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_lang <- merge(vill, lang, by = "language") # merge villages and coordinates with language metadata
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
lang <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_lang <- merge(vill, lang, by = "lang") # merge villages and coordinates with language metadata
ev_vill <- merge(vill_lang, ev, by = "glottocode") # merge villages, coordinates, and language metadata with feature information
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$language.y, # color feature = language
color = ev_vill$color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$language,
zoom.control = T,
popup = ev_vill$name, # popup = village name + any other information you want to add
width = 3, stroke.radius = 8,
legend = FALSE)
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang.y, # color feature = language
color = ev_vill$color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = ev_vill$village, # popup = village name + any other information you want to add
width = 3, stroke.radius = 8,
legend = FALSE)
View(ev_vill)
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = ev_vill$village, # popup = village name + any other information you want to add
width = 3, stroke.radius = 8,
legend = FALSE)
table(is.na(ev_vill$feature))
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = ev_vill$village, # popup = village name + any other information you want to add
width = 3, stroke.radius = 8,
legend = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
lang <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_lang <- merge(vill, lang, by = "lang") # merge villages and coordinates with language metadata
ev_vill <- merge(vill_lang, ev, by = "glottocode") # merge villages, coordinates, and language metadata with feature information
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = ev_vill$village, # popup = village name + any other information you want to add
width = 3, stroke.radius = 8,
legend = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
meta <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_meta <- merge(vill, meta, by = "lang") # merge villages and coordinates with language metadata
ev_vill <- merge(vill_meta, ev, by = "glottocode") # merge villages, coordinates, and language metadata with feature information
# filter core languages
core_meta <- meta %>%
filter(core == "yes")
core_data <- left_join(core_meta, ev, by = "lang")
View(core_meta)
View(ev)
# filter core languages
core_meta <- meta %>%
filter(core == "yes")
core_data <- left_join(core_meta, ev, by = "lang")
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
meta <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_meta <- merge(vill, meta, by = "lang") # merge villages and coordinates with language metadata
ev_vill <- merge(vill_meta, ev, by = "glottocode") # merge villages, coordinates, and language metadata with feature information
# filter core languages
core_meta <- meta %>%
filter(core == "yes")
core_data <- left_join(core_meta, ev, by = "lang")
View(core_data)
# filter core languages
core_meta <- meta %>%
filter(core == "yes")
core_data <- left_join(core_meta, ev, by = "lang")
# draw a map
map.feature(lang.gltc(core_data$glottocode),
latitude = core_data$lat,
longitude = core_data$lon,
features = core_data$lang, # color feature = language
color = core_data$lang_color,
stroke.features = core_data$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = core_data$lang,
zoom.control = T,
width = 3, stroke.radius = 8,
legend = FALSE)
# filter core languages
core_meta <- meta %>%
filter(core == "yes")
core_data <- left_join(core_meta, ev, by = "lang")
# draw a map
map.feature(lang.gltc(core_data$glottocode.x),
latitude = core_data$gltc_lat,
longitude = core_data$gltc_lon,
features = core_data$lang, # color feature = language
color = core_data$lang_color,
stroke.features = core_data$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = core_data$lang,
zoom.control = T,
width = 3, stroke.radius = 8,
legend = FALSE)
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village, <br>, "<b>Source:</b>", ev_vill$source, ev_vill$page)
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village, <br>, "<b>Source:</b>", ev_vill$source, ev_vill$page),# popup = village name + any other information you want to add
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village, <br>, "<b>Source:</b>", ev_vill$source, ev_vill$page),# popup = village name + any other information you want to add
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village, "<br>",
"<b>Source:</b>", ev_vill$source, ev_vill$page),# popup = village name + any other information you want to add
width = 3, stroke.radius = 8,
legend = FALSE)
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village),
width = 3, stroke.radius = 8,
legend = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
meta <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_meta <- merge(vill, meta, by = "lang") # merge villages and coordinates with language metadata
ev_vill <- merge(vill_meta, ev, by = "glottocode") # merge villages, coordinates, and language metadata with feature information
View(ev_vill)
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang.x, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village),
width = 3, stroke.radius = 8,
legend = FALSE)
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang.x, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village, "<br>",
"<b>Source:</b>", ev_vill$source, ev_vill$page),
width = 3, stroke.radius = 8,
legend = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
meta <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_meta <- merge(vill, meta, by = "lang") # merge villages and coordinates with language metadata
ev_vill <- merge(vill_meta, ev, by = "glottocode") # merge villages, coordinates, and language metadata with feature information
ev_vill$datapoint <- "generalized datapoint"
# draw a map
map.feature(lang.gltc(ev_vill$glottocode),
latitude = ev_vill$lat,
longitude = ev_vill$lon,
features = ev_vill$lang.x, # color feature = language
color = ev_vill$lang_color,
stroke.features = ev_vill$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = ev_vill$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", ev_vill$village, "<br>",
"<b>Source:</b>", ev_vill$source, ev_vill$page, "<br>",
"<b>Datapoint:</b>", ev_vill$datapoint),
width = 3, stroke.radius = 8,
legend = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(tidyverse)
library(lingtypology)
library(DT)
# load data
vill <- read_tsv("data/villages.csv") # villages dataset
meta <- read_tsv("data/meta.csv") # language metadata and colors
ev <- read_tsv("table_example_evidentialityxtense.csv") # feature dataset
# preparation of data
vill <- vill[complete.cases(vill$lat),] # remove villages for which we do not have coordinates (yet)
vill_meta <- merge(vill, meta, by = "lang") # merge villages and coordinates with language metadata
ev_vill <- merge(vill_meta, ev, by = "glottocode") # merge villages, coordinates, and language metadata with feature information
ev_vill$datapoint <- "extrapolated datapoint"
# filter core languages
core_meta <- meta %>%
filter(core == "yes")
core_data <- left_join(core_meta, ev, by = "lang")
core_data$datapoint <- "general datapoint"
# draw a map
map.feature(lang.gltc(core_data$glottocode.x),
latitude = core_data$gltc_lat,
longitude = core_data$gltc_lon,
features = core_data$lang, # color feature = language
color = core_data$lang_color,
stroke.features = core_data$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = core_data$lang,
zoom.control = T,
popup = paste("<b>Village:</b>", core_data$village, "<br>",
"<b>Source:</b>", core_data$source, core_data$page, "<br>",
"<b>Datapoint:</b>", core_data$datapoint),
width = 3, stroke.radius = 8,
legend = FALSE)
# filter core languages
core_meta <- meta %>%
filter(core == "yes")
core_data <- left_join(core_meta, ev, by = "lang")
core_data$datapoint <- "general datapoint"
# draw a map
map.feature(lang.gltc(core_data$glottocode.x),
latitude = core_data$gltc_lat,
longitude = core_data$gltc_lon,
features = core_data$lang, # color feature = language
color = core_data$lang_color,
stroke.features = core_data$value, # stroke.feature = your feature value
stroke.color = c("black", "white"),
label = core_data$lang,
zoom.control = T,
popup = paste("<b>Source:</b>", core_data$source, core_data$page, "<br>",
"<b>Datapoint:</b>", core_data$datapoint),
width = 3, stroke.radius = 8,
legend = FALSE)
